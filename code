from typing import List, Dict, Optional
from Bio import Entrez
import csv

# Set your email for PubMed API access
Entrez.email = "your_email@example.com"

def fetch_papers(query: str, max_results: int = 10) -> List[Dict]:
    """
    Fetch papers from PubMed based on a query.
    """
    try:
        handle = Entrez.esearch(db="pubmed", term=query, retmax=max_results)
        record = Entrez.read(handle)
        handle.close()

        id_list = record.get("IdList", [])
        if not id_list:
            print("No papers found for the given query.")
            return []

        handle = Entrez.efetch(db="pubmed", id=",".join(id_list), rettype="medline", retmode="text")
        papers = handle.read()
        handle.close()

        return parse_papers(papers)
    except Exception as e:
        print(f"Error fetching papers: {e}")
        return []

def parse_papers(papers: str) -> List[Dict]:
    """
    Parse PubMed papers and extract relevant details.
    """
    parsed_papers = []
    for paper in papers.split("\n\n"):
        paper_details = {}
        lines = paper.split("\n")
        for line in lines:
            if line.startswith("PMID-"):
                paper_details["PubmedID"] = line.split("- ")[1]
            elif line.startswith("TI  -"):
                paper_details["Title"] = line.split("- ")[1]
            elif line.startswith("DP  -"):
                paper_details["Publication Date"] = line.split("- ")[1]
            elif line.startswith("AD  -"):
                affiliations = line.split("- ")[1]
                paper_details["Company Affiliations"] = extract_company_affiliations(affiliations)
            elif line.startswith("FAU -"):
                author = line.split("- ")[1]
                if is_non_academic_author(author):
                    paper_details.setdefault("Non-academic Authors", []).append(author)
            elif line.startswith("EM  -"):
                paper_details["Corresponding Author Email"] = line.split("- ")[1]

        if paper_details.get("Company Affiliations"):
            parsed_papers.append(paper_details)

    return parsed_papers

def extract_company_affiliations(affiliations: str) -> List[str]:
    """
    Extract company affiliations from author details.
    """
    companies = []
    for aff in affiliations.split(";"):
        if "pharma" in aff.lower() or "biotech" in aff.lower():
            companies.append(aff.strip())
    return companies

def is_non_academic_author(author: str) -> bool:
    """
    Check if an author is non-academic based on email or affiliation.
    """
    return not ("university" in author.lower() or "lab" in author.lower() or ".edu" in author.lower())
